const COMPUTED_PROGRESS_STATE = {
  NON_ACTIVE: 'NON ACTIVE',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
};

// what to output if found (0 or null) on following state
const PROGRESS_STATE = {
  LAND_REQUEST: COMPUTED_PROGRESS_STATE.NON_ACTIVE,
  LEF: COMPUTED_PROGRESS_STATE.NON_ACTIVE,
  ROW_GRADING: COMPUTED_PROGRESS_STATE.NON_ACTIVE,

  STRINGING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  WELDING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  NDT_ACCEPTED: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  JOINT_COATING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  TRENCHING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  LOWERING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,
  BACKFILLING: COMPUTED_PROGRESS_STATE.IN_PROGRESS,

  SCREW_ANCHER: COMPUTED_PROGRESS_STATE.DONE,
  REINSTATE: COMPUTED_PROGRESS_STATE.DONE,
  LRF: COMPUTED_PROGRESS_STATE.DONE,
};

const computeProgress = (sheet = {}, row = 0, col = 0) => {
  // use (row-col) of pipe section's Land Request
  const outputMap = Object.values(PROGRESS_STATE);
  for (let i = 0; i < outputMap.length; i++) {
    const cell = sheet.getCell(row + i, col);
    if (!cell.value) return outputMap[i];
  }
  return COMPUTED_PROGRESS_STATE.DONE;
};

module.exports = {
  computeProgress,
  PROGRESS_STATE,
  COMPUTED_PROGRESS_STATE,
};
